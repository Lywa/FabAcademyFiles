%!PS-Adobe-3.0 %%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 24.1.0%%For: (Carla) ()%%Title: (Spider_tiny45-brd_edited_L.ai)%%CreationDate: 3/8/21 3:44 PM%%Canvassize: 16383%%BoundingBox: 0 -1 124 124%%HiResBoundingBox: 0.2874 -0.012595 123.3126 123.0126%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%RGBProcessColor: 0 0 0 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 62.5 61.4 62.5 61.4%AI3_TileBox: -226.25 -294.05 349.75 439.95%AI3_DocumentPreview: None%AI5_ArtSize: 123.5 123.9%AI5_RulerUnits: 4%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -68.208 133.0692 5.17622 1665 1002 26 0 0 6 42 0 0%AI5_OpenViewLayers: 7%%PageOrigin:-333 -245.1%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 128 8%%BeginData: 11268 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD35FFA8A8FD047D527D527D527D527D527D7D7D527D7DA8A8FD64%FF7D7D527D527D7DA8A8FD0DFFA8FFA8A87D7D527D7DA8A8FD5BFFA87D7D%527D7DFD1BFFA8A87D7D527DA8FD55FFA87D7D527DA8FD22FFA87D7D527D%A8FD50FF7D7D52A8FD2AFF7D7D52A8FD4BFFA87D527DA8FD2FFF7D527DFD%48FF7D7D7DFD34FFA8527DFD43FFA87D527DA8FD37FF7D527DFD40FF7D52%7DFD3CFF7D52A8FD3DFF527DA8FD3FFF5252A8FD39FF7D52A8FD42FFA852%7DFD36FFA8527DFD46FF7D52A8FD33FF7D52A8FD48FFA852A8FD31FF5252%A8FD4BFF527DFD2FFF52A8FD4EFF7D52FD2CFFA827A8FD50FF7D52A8FD29%FFA852FD15FFFD05A8FD09FFA8FFA8FFA8FD2BFFA852A8FD27FFA827FD16%FF7D527D7D527DFD07FFA8527D7D7D52A8FFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FD19FFA8527DFD25FFA852FD17FF7DFFFFFFA87DFD07FFA87D%FFFFFFFD167DA8FD18FF52A8FD23FF7DF8FD18FF7DA8FFFFA87DFD07FFA8%7DFFFFFFA8527D527D527D527D527D527D527D527D527D52527D7DFD19FF%527DFD21FF7D27A852FD17FF7DFFFFFFA87DFD08FF7DFFFFFF52A8FFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF7D7D7DFD1AFF7DA8FD1FFF7DF8FFFF%7D7DFD16FF7DA8FFFFA87DFD07FFA87DFFFFFF7DA8FD12FFA8527DFD1AFF%5227A8FD1DFFA8F8FD04FF7DA8FD15FF7DFFFFFFA87DFD08FF7DFFFFFF7D%A8FD12FFA87D7DFD19FF7D7DA852FD1CFFA8F8A8FD04FF7DA8FD15FF7D52%A87D7D7DFD07FFA8527DA87D52A8FD10FFA852527D7D527DFD16FF7D52FF%FF7D27FD1BFF277DFD06FF7DFD15FFA8A87DA87DFD09FFA8A87DA8A8FD11%FF7DA8FD04FF52FD16FF7DFD04FF7D52FD19FF2752FD06FFA87DFD39FF7D%A8FD04FF7DFD15FFA852FD05FF277DFD17FF7D27FD07FFA87DFD39FF7DA8%A8FFA8FF52FD15FF7DA8FD06FF27A8FD15FFA827A8FD07FF7DA8FD39FFA8%527D527D527DFD15FF7DA8FD06FFA827FD15FF277DFD08FF7DFD56FF7DA8%FD07FF7D52FD13FF7D27FD08FF7D7DFD56FFA852FD08FF27A8FD12FF277D%FD07FF7D527DFD57FF7DA8FD07FFA852FD11FFFD057DFFA8A87D52527D52%7DFD56FF7D7DFD08FF527DFD10FF52FFFFA8FD047DA8FFFFA87D7D7DFD3A%FFA8FFA8FD19FF52A8A8FD06FFA827FD0FFF7D7DFD0BFFFD047DFD37FF7D%527D527D527DFD16FF527D525252A8A8FFA87D52527DFD0EFF52FD0DFFA8%7D7D7DFD36FF7DA8FD04FF7DFD15FF527D52FFFFA8FD057DFFFF52A8FD0C%FF527DFD0EFF7D7D527DFD12FFA8FFA8FD20FF7DA8FFFFFFA87DFD14FF52%7D52FD0BFF7D7DFD0CFF7DFD10FFA87D7D7DFD10FFFD047D52A8FD08FF52%7D7D7D52FD06A8FD0BFF7D7D7DA8A8A852FD13FF527D52FD0DFF52FD0BFF%7D7DFD11FFA852527DFD0FFF7DA8FFFFA87DFD07FF7D7DA8FFA8A8527D52%7D527D7DFD0BFF7DA8527D52A8FD12FF527D52FD0EFF7D7DFD0AFF52FD13%FFA87D7D7DFD0EFF7DFFFFFFA87DFD07FFA87DFFFFFFFD087DFD0EFF52A8%FD12FF527D52FD10FF52FD09FF5227A8FD13FF7D52527DFD0DFF7DA8FFFF%A87DFD07FF7D7DFFFFFF7DA8FFFFFFA8527DFD0DFFA87D7DFD11FF527D52%FD11FF7DA8FD08FF527D527DFD13FFA8527D7DFD0CFF7DFFFFFFA8A8FD07%FFA87DFFFFFF7DFD04FFA852A8FD0EFF52A8FD10FF527D52FD13FF52FD07%FF7D27FFFF527DFD13FF7D52527DFD0BFF7DA8FFFFA87DFD07FF7D7DFFFF%FF7DA8FFFFFFA8527DFD0DFFA87D7DFD0FFF527D52FD14FF7DA8FD06FF52%A8FFFFFF52A8FD13FFA852527DFD0AFF52A8FFFF7D7DFD07FFA852FFA8FF%52FD04FFA8527DFD0EFF527DFD0EFF527D52FD15FFA87DFD05FFA827A8FF%FFFFA852FD14FF7D52527DFD09FFA8527D527DA8FD07FFA87D527D527DA8%FFFFFF7D527DFD0DFFA87D7DFD0DFF527D52FD15FF7D5227FD05FF7D52FD%05FF52FD15FFA852527DFD09FFA852FD14FFA8527DFD0EFF7D7DFD0CFF52%7D52FD15FF527DFF527DFD04FF277DFD05FF7DA8FD15FFA852527DFD08FF%7D7D52FD13FFA87D7DFD0DFFA87D7DFD0BFF527D52FD15FF52A8FFFF7D52%FD04FF27A8FD05FF7DA8FD16FFA852527DFD08FF527D52FD12FFA8527DFD%0EFF52A8FD0AFF527D52FD15FF52A8FD04FF27FFFFFFA827FD06FF7DA8FD%17FF7D52527DFD08FF527D52FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8%527DFD0DFFA87D7DFD09FF527D52FD15FF7D7DFD05FF52A8FFFF527DFD06%FF52FD19FFA87D527DFD08FF527D527D527D527D527D527D527D527D52A8%FFA852A8FD0EFF52A8FD08FF527D52FD16FF7DA8FD05FF527DFFFF527DFD%05FF52A8FD1AFFA87D527DFD08FF527D7D7D527D7D7D527D7D7D527D527D%7DFFA8527DFD0DFFA87D7DFD07FF527D52FD17FF52FD06FFA852FFFF27FD%05FFA8527DFD1BFFA87D527DFD16FF527DFFA8527DFD0EFF527DFD06FF52%7D52FD18FF7DFD06FFA852FFA852FD04FF7D5252527DFD1BFFA852527DFD%14FFA8527DFFA8527DFD0DFFA87D7DFD05FF277D52FD19FF52FD07FF27FF%A827FFA8A8527DFF7D527D7DFD1BFFA87D527DFD14FF527DFFA8527DFD0E%FF7D7DFD04FF527D52FD1AFF7DA8FD06FF7D7D7D527D7D7DFD04FF7D5252%7DFD1BFFA852527DFD12FFA87D7DFFA87D7DFD0DFFA87D7DFFFFFF527D52%FD1BFFA87DFD06FF527DA8A8FD08FF7D527D7DFD1BFFA87D527DFD12FF52%A8FFA8527DFD0EFF527DFFFF527D52FD1DFF7DA8FD05FFA85252A8FD09FF%7D52527DFD1BFFA852527DFD10FFA8527DFFA8527DFD0DFFA87D7DFF527D%52FD1FFF27A8FD04FFA8527DA8FD0AFF7D527D7DFD1BFFA87D527DFD10FF%52A8FFA852A8FD0EFF7D7D527D52FD1FFF5252527D7DFFA8A82752FD0CFF%7D52527DFD1BFFA87D527DA8FFA8FFA8FFA8A87DA8A8A87DFFA8527DFFA8%527DFF7DA87DFD04A8FFA8FFA8FFA87D527D52FD1FFF525252FFA87D527D%52527DFD0DFF7D52527DFD1BFFA87D527D527D527D527D7DA87DA87D7D7D%FF527DFFA852A87D7D7DA87DA87D7D527D527D527D7DA852FD1FFF525252%FD07FF7D52FD0EFF7D52527DFD1BFFA87D7D7D527D527D52FD047DA8527D%A8527DFFA8527D7D52A8FD047D527D527D527D527D52FD1FFF525252FD08%FF7D7DFD0FFF7D527D7DFD23FFA8FFA8FFA8FFFFFF527DFFA852A8FFFD06%A8FD27FF525252FD09FF5252FD10FF7D52527DFD21A8FD057DA87DFFA87D%7DFF7D7D7DFFFD06A8FD26FF525252FD0AFF7D7DFD11FF7D527D527D527D%527D527D527D527D527D527D527D527D527D527D527D527D527D527D527D%7DFD04A87D7DFF52A8FFFF527D52A87DA87DA85252527D527D527D527D52%7D527D527D527D527D527D527D527D527D527D527D527D527D527D525252%FD0BFF5252FD12FF7D52FD217D52FD057D52A8A8527DFFFFA85252FD057D%52527D527D527D527D527D527D527D527D527D527D527D527D527D527D52%7D527D527D527D527D7DFD0CFF7D7DFD3AFFA8FFFFFF52A8FD06FFA8FFA8%FD35FF5252FD13FF7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA8FD067D52A8A8527DFD04FFA852FD067DA87D%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D%A87DA87DA87DA8FD0BFF7D7DFD12FF527D527D527D527D527D527D527D52%7D527D527D527D527D527D527D527D527D527D527D7DFD04A87D7DFF527D%FD04FF52FD04A8FF7D52527D527D527D527D527D527D527D527D527D527D%527D527D527D527D527D527D527D527D527D527DFD0AFF5252FD10FFA852%7D52A87DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D%7D7DA87DA8FD067D52A87D7D7DFD04FFA8527D7D7D52FD047DA87D7D7DA8%7D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA87D7D7DA8FD04%7D527DFD09FF7D7DFD10FF527D52FD23FFA8FFA8FFA8FFFD047DFD08FFA8%FD29FFA87D7D7DFD08FF7D52FD0EFFA8525252FD1AFFA852FD077D52FD05%7D527D7D7DFD05FF7D52FD0F7DA8FD1DFFA852527DFFFFFFA8FD057DFD0D%FFA8527D52FD1AFFA852A8A8FD077DA8FFA8FFA8A8527DFD06FF527DFD04%A87D7D527D527D5252FD047DFD1EFFA87D7D7DA87D52A8A87D2752FD0CFF%A8525252FD1AFF7D527D277D277DA8A87DA8FD067D52A8FD07FFA8FD077D%A8A8A87DA87D52527D7D52A8FD1DFF7D7D527DA8FD04FF277DA8FD0BFF52%7D52FD1AFFA8527D7DFF7D7D52FD21FF52A8A87D7D7DFD1EFF52A8FD06FF%277DA8FD09FFA8527D52FD1AFFA8527D52FFFFFF527D52A8FD1EFFA85252%FFA8527D7DFD1CFFA852FD06FF7D52A87DFD09FF527D52FD1AFFA8527D52%FD05FF7D7D52A8FD1EFF527DFFFFA87D7D7DFD1BFF7D7DFD06FF7D52A87D%FD07FFA8527D52FD1AFFA8527D52FD07FF527D52FD1DFFA85252FFFFFFA8%527D52A8FD19FF52FD07FF527DFF52A87DA8A8FFFFFF527D52FD1AFFA852%7D52FD08FFA87D7DFD1EFF527DFD04FFA87D7D7DFD19FF7DFD07FF52A8FF%277DA87D7D527D527D52FD1AFFA8527D52FD09FF7D7D7DFD1DFFA87D7DFD%05FFA87D7D52A8FD17FF52FD07FF27FFFF52A8FD04FF7D7D52FD1AFFA852%7D52FD0AFFA8527DFD1EFF527DFD06FFA87D7D7DFD17FF7DA8FD05FFA852%FFFF7D52FD05FF527DFD19FFA8527D52FD0BFF7D7D7DFD1DFFA85252FD07%FFA8527D52A8FD15FF7D7DFD05FF7D52FFFFA852FD06FF52FD18FFA852A8%52FD0CFFA87D7DFD1EFF527DFD08FFA87D7D7DFD16FF52FD05FF52A8FFFF%FF27FD06FFA87DFD16FFA8527D52FD0DFF7D7D7DFD1DFFA85252FD09FFA8%527D7DFD15FFA827FFFFFFA827A8FFFFFF7D7DFD05FFA87DFD15FFA852A8%52FD0EFFA87D7DFD1EFF527DFD0AFFA87D7D7DFD15FFA852A8FFA827FD04%FF7D52FD06FF52FD14FFA8527D52FD0FFF7D7D7DFD1DFFA85252FD0BFFA8%527D52A8FD14FFA8527D277DFD05FF27FD06FF7DFD13FFA852A852FD10FF%A87D7DFD1EFF527DFD0CFFA87D7D7DFD16FFA852FD06FF527DFD05FF52FD%12FFA8527D52FD11FF7D7D7DFD1DFFA87D7DFD0DFFA87D7D52A8FD14FFA8%7DFD06FF7D52FD04FF7D7DFD11FFA8527D52FD12FFA8527DFD1EFF527DFD%0EFFA87D7D7DFD14FF52FD08FF27A8FFFFA852A8FD10FFA8527D52FD13FF%7D7D7DFD1DFFA85252FD0FFFA8527D52A8FD11FFA852FD08FF7D52FFFF7D%A8FD10FFA852A852FD14FFA87D7DFD1EFF527DFD10FFA87D7D7DFD11FF7D%7DFD08FFA8527D527DFD10FFA8527D52FD15FF7D7D7DFD1DFFA85252FD11%FFA8527D7DFD10FF52FD0AFF5252FD11FFA8527D52FD16FF7D7D7DA8FD05%FFFD04A8FD06FFA8A8A8FD07FFA8A8A8FF527DFD12FFA87D7D7DFD0EFF7D%7DFD0BFF52FD10FFA8527D27FD16FF7D52FF7D52A8FFFFFFA8527D7D527D%FD04FF527D7D7D52FD04FFA8277D7D527D7D52FD13FFA8527D52A8FD0CFF%52A8FD0BFF7D7DFD0FFF527D52FD17FF7DFFFFFF7DFD05FF7DFFFFFF7DFD%04FF7DFFFFA87DFD04FFA8A8FFFF7D7D527DFD14FFA87D7D7DFD0BFFA87D%FD0CFFA852FD0DFFA8527D52FD18FF7DA8FFFF7DA8FFFFFFA87DFFFFA87D%7D7D527D7DFFFFA852FD04FFA87DFFFFA852527DFD15FFA87D7D52A8FFFF%FF7D7D527D7DFF52FD0EFF7DA8FD0CFF52A852FD19FF7DA8FFFF7DFD05FF%7DFFFFFF527D527D527DFFFFA87DFD04FFA87DFFFFA87D52FD17FFA87D7D%7DA87D527DA8FFA87D277DFD0FFF52FD0AFFA8527D52FD1AFF7DA8FFFF7D%A8FFFFFFA87DFFFFA87DA8FFA8A852FFFFFF52FD04FFA87DFFFF7D7DFD19%FFA87D7D527DFD05FFA827A8FD0FFFA87DFFFD057DFFFFFF52A852FD1BFF%7D527D7D52FD05FF527D7D527DFD04FF7D527D527DFD04FFA8527DA852A8%FD1AFFA852FD07FF527DFD11FF5252A8A8FFA8A8527D527D52FD1DFFA8A8%A8FD07FFA8A8A8FD05FFFD05A8FD05FFA8A87DA8FD1BFFA87DFD06FFA827%FD12FF7D52FD06FF7DA852FD59FF52FD07FF27A8FD13FF277DFD06FF7D7D%FD58FFA87DFD06FF5252FD15FF27FD07FF52FD59FF7DFD05FFA852FD16FF%7D27FD06FFA87DFD57FFA87DFD04FFA827A8FD17FF5252FD05FFA87DFD58%FF52FD04FF527DFD18FFA8277DFD05FF52FD58FF7D7DFFFF7D52FD1AFFA8%27A8FD04FF7DFD59FF52FFA827FD1CFF7D27A8FFFFA852FD59FFA85227FD%1EFF5227FFFF7DA8FD5AFF27A8FD1FFF52277D7DFD5AFF27A8FD21FF5227%A8FD59FF52A8FD23FF7D52FD58FF52A8FD25FFA852FD56FF52A8FD27FF7D%52A8FD52FFA827A8FD29FFA852A8FD50FFA852FD2CFFA8527DFD4EFF7D52%FD2FFF7D52FD4CFF7D7DFD31FFA827A8FD48FFA8527DFD34FF527DFD46FF%7D52A8FD36FF7D52A8FD42FFA8527DFD39FFA85252FD3FFFA87D52FD3DFF%7D527DFD3CFF7D527DFD40FF7D527DFD38FFA8527DFD43FFA87D527DFD34%FF7D5252FD48FF7D7D7DFD2FFFA87D527DFD4BFFA8A852527DFD29FFA87D%527D7DFD50FFA87D527D7DFD23FFA8A87D7D7DFD56FFA87D527D7DA8A8FD%1BFF7D7D527D7DA8FD5BFFA8A87D7D527D7DA8A8FD0FFFA8FFA87D52FD04%7DFD64FFA8A87D7D527D527D527D527D527D527D527D527D527D7DA8A8FD%32FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Vectorized Object) (Image Tracing) (Vectorize.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Deform.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (PlanetX.aip)%AI8_PluginGroupInfo(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligraphicBrushTool.aip)%AI8_PluginGroupInfo(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (SwatchLibs.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathfinderS.aip)%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.749721 0.679194 0.670497 0.901457 ([Registration]) 0 Xs([Registration])PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 AuUuUuu1 D0 R0.749721 0.679194 0.670497 0.901457 0 0 0 XA0 J 0 j 0.5 w 10 M []0 d0 XR59.6 104.1 m79.2 104.1 L79.2 100.3 L77.1 100.3 L77.1 96.7 L82.5 96.7 L82.5 100.3 L80.4 100.3 L80.4 104.6 L80.4 104.9 80.1 105.2 79.8 105.2 C59.6 105.2 L59.6 106.4 L55.3 106.4 L55.3 99.9 L59.6 99.9 L59.6 104.1 Ls59.6 85.9 m59.8 86.1 L64.8 86.1 L64.8 63.5 L64.8 63.5 64.8 63.4 v64.8 63.3 64.8 63.3 64.8 63.2 c64.8 63.1 64.9 63.1 64.9 63 C64.9 63 L65.7 62.2 L65.7 62.2 L65.8 62.1 65.9 62.1 v66 62.1 66 62.1 66.1 62.1 C67.2 62.1 L67.2 61.8 L73 61.8 L73 62.1 L107.4 62.1 L109.8 62.1 L109.9 62.1 109.9 62.1 110 62.1 c110.1 62.1 110.1 62.2 110.2 62.2 C117.1 69.1 L118.2 68.4 119.4 68 120.8 68 c121.4 68 122.1 68.1 122.7 68.3 C122.8 68.3 122.9 68.4 122.9 68.5 C122.4 72.8 121.4 77 120.1 81.1 C120.1 81.2 120 81.3 119.9 81.2 C116.6 80.7 114.2 77.9 114.2 74.6 c114.2 72.7 115 71 116.3 69.7 C109.6 63 L107.4 63 L73 63 L73 63.3 L67.3 63.3 L67.3 63 L66.4 63 L65.9 63.5 L65.9 86.7 L65.9 87 65.6 87.3 65.3 87.3 C59.5 87.3 L59.5 87.8 L55.2 87.8 L55.2 81.3 L59.5 81.3 L59.6 85.9 L59.6 85.9 Ls0 D42.3 106.5 m46.6 106.5 L46.6 100 L42.3 100 L42.3 106.5 Ls1 D66.1 33.2 m61 33.2 L61 35.4 L57.4 35.4 L57.4 30 L61 30 L61 32.1 L66.1 32.1 L66.1 30 L69.7 30 L69.7 35.4 L66.1 35.4 L66.1 33.2 Ls58.9 54.6 m58.9 54.9 L59.3 54.9 L59.4 54.9 59.4 54.9 59.5 54.9 c59.6 54.9 59.6 55 59.7 55 C59.7 55 L62.1 57.4 L62.1 57.4 L62.2 57.5 62.2 57.6 v62.2 57.7 62.2 57.7 62.2 57.8 C62.2 75.9 L62.2 76.2 61.9 76.5 61.6 76.5 C47.6 76.5 L44.3 79.8 L44.3 81.4 L46.6 81.4 L46.6 87.9 L42.3 87.9 L42.3 81.4 L43.2 81.4 L43.2 79.6 L43.2 79.6 L43.2 79.5 43.2 79.5 43.2 79.4 c43.2 79.3 43.3 79.3 43.3 79.2 C43.3 79.2 L46.9 75.6 L46.9 75.6 L47 75.6 47 75.5 47.1 75.5 c47.2 75.5 47.2 75.5 47.3 75.5 C61.1 75.5 L61.1 58.3 L59 56.2 L58.8 56.2 L58.8 56.5 L53.1 56.5 L53.1 56.2 L45 56.2 L45 56.2 L44.9 56.2 44.9 56.2 44.8 56.2 c44.7 56.2 44.7 56.1 44.6 56.1 C44.6 56.1 L44.6 56.1 L17.4 28.7 L16.3 29.6 14.8 30.1 13.3 30.1 c12 30.1 10.8 29.7 9.7 29 C9.6 28.9 9.6 28.8 9.6 28.7 C11.9 25.1 14.6 21.6 17.6 18.5 C17.7 18.4 17.8 18.4 v17.9 18.4 17.9 18.4 17.9 18.5 C19.2 19.8 20 21.5 20 23.3 c20 25 19.3 26.6 18.3 27.8 C45 54.7 L49.3 50.4 L49.3 35.4 L48.1 35.4 L48.1 30 L51.7 30 L51.7 35.4 L50.5 35.4 L50.5 50.6 L50.5 50.6 L50.5 50.7 50.5 50.7 50.5 50.8 c50.5 50.9 50.4 50.9 50.4 51 C46.3 54.9 L53.2 54.9 L53.2 54.6 L58.9 54.6 Ls81.5 67.6 m81.5 87.4 L82.4 87.4 L82.4 91 L77 91 L77 87.4 L80.3 87.4 L80.3 66.9 L73 66.9 L73 67.2 L67.3 67.2 L67.3 65.5 L73 65.5 L73 65.8 L81 65.8 L81.1 65.8 81.1 65.8 81.2 65.8 c81.3 65.8 81.3 65.9 81.4 65.9 C81.4 65.9 L106.9 91.4 L108 90.5 109.4 90 110.9 90 c112.4 90 114 90.5 115.1 91.5 C115.2 91.6 115.2 91.7 115.1 91.8 C113 95.6 110.4 99.1 107.5 102.3 C107.4 102.4 107.3 102.4 107.2 102.3 C105.2 101.1 104 98.9 104 96.6 c104 94.8 104.7 93.2 105.8 92 C81.5 67.6 Ls14 91.9 m15.6 91.9 17.1 92.5 18.2 93.4 C45.8 65.9 L45.8 65.9 L45.9 65.9 45.9 65.8 46 65.8 c46.1 65.8 46.1 65.8 46.2 65.8 C53.3 65.8 L53.3 65.5 L59 65.5 L59 67.2 L53.3 67.2 L53.3 66.9 L46.4 66.9 L19.1 94.2 L20.1 95.4 20.7 96.9 20.7 98.6 c20.7 100.8 19.6 102.9 17.7 104.2 C17.6 104.3 17.5 104.2 17.4 104.2 C14.4 101.1 11.7 97.6 9.4 94 C9.3 93.9 9.4 93.8 9.4 93.7 C10.8 92.5 12.4 91.9 14 91.9 cs122.8 55.5 m122.1 55.7 121.5 55.8 120.8 55.8 c119.2 55.8 117.7 55.2 116.6 54.3 C111.4 59.5 L111.3 59.6 111.3 59.6 111.2 59.6 c111.1 59.6 111.1 59.6 111 59.6 C111 59.6 110.9 59.6 V85.8 59.6 L73 59.6 L73 59.9 L67.3 59.9 L67.3 58.2 L73 58.2 L73 58.5 L85.8 58.5 L110.8 58.5 L115.8 53.5 L114.8 52.3 114.2 50.8 114.2 49.1 c114.2 45.7 116.8 42.8 120.2 42.4 C120.2 42.4 L120.3 42.4 120.4 42.5 Y121.7 46.6 122.6 50.9 123 55.2 C123 55.4 122.9 55.5 122.8 55.5 Cs112.2 32.9 m110.4 32.9 108.7 32.2 107.5 31 C82.6 55.9 L82.5 56 82.5 56 82.4 56 c82.3 56 82.3 56 82.2 56 C82.2 56 L81 56 L73 56 L73 56.3 L67.3 56.3 L67.3 54.6 L73 54.6 L73 54.9 L80.4 54.9 L80.4 34.1 L79.5 33.2 L79 33.2 L79 35.3 L75.4 35.3 L75.4 29.9 L79 29.9 L79 32 L79.7 32 L79.8 32 79.8 32 79.9 32 c80 32 80 32.1 80.1 32.1 C81.3 33.3 L81.4 33.4 81.4 33.4 81.4 33.5 C81.4 33.6 L81.4 33.7 L81.4 54.9 L81.8 54.9 L106.6 30.1 L105.8 29 105.3 27.7 105.3 26.2 c105.3 24.2 106.2 22.4 107.7 21.1 C107.8 21.1 L107.9 21.1 107.9 21.1 108 21.2 C110.9 24.5 113.4 28 115.4 31.8 C115.5 31.9 115.4 32 115.3 32.1 C114.5 32.6 113.3 32.9 112.2 32.9 cs7.7 73.9 m19.3 62.3 L19.4 62.2 19.4 62.2 19.5 62.2 c19.6 62.2 19.6 62.2 19.7 62.2 C53.2 62.2 L53.2 61.9 L58.9 61.9 L58.9 63.6 L53.2 63.6 L53.2 63.3 L20 63.3 L8.5 74.8 L9.3 75.9 9.7 77.2 9.7 78.6 c9.7 81.5 7.9 84 5.1 84.9 C5 84.9 4.9 84.9 4.8 84.8 C3.2 80.8 1.9 76.6 1.2 72.3 C1.2 72.2 1.2 72.1 1.4 72.1 C1.9 72 2.5 71.9 3 71.9 c4.8 71.9 6.5 72.7 7.7 73.9 Cs8.5 47 m20 58.5 L53.3 58.5 L53.3 58.2 L59 58.2 L59 59.9 L53.3 59.9 L53.3 59.6 L19.8 59.6 L19.8 59.6 L19.7 59.6 19.7 59.6 19.6 59.6 c19.5 59.6 19.5 59.5 19.4 59.5 C7.7 47.8 L6.6 48.6 5.2 49.1 3.7 49.1 c3 49.1 2.4 49 1.8 48.8 C1.7 48.8 1.6 48.7 1.7 48.6 C2.6 44.4 4 40.2 5.8 36.3 C5.8 36.2 5.9 36.2 6 36.2 C6 36.2 6.1 36.2 V8.8 37.1 10.5 39.7 10.5 42.5 C10.4 44.2 9.7 45.8 8.5 47 CsUUu0 D1 J 1 j 0.4252 w61.8 122.8 m95.6551 122.8 123.1 95.3551 123.1 61.5 c123.1 27.645 95.6551 0.200005 61.8 0.200005 c27.9449 0.200005 0.5 27.645 0.5 61.5 c0.5 95.3551 27.9449 122.8 61.8 122.8 csULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF